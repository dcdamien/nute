
lia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800100  00800100  00000842  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002a2  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001396  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006ea  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ed7  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000250  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000040e  00000000  00000000  0000370c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000742  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	92 c2       	rjmp	.+1316   	; 0x528 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	f0 c0       	rjmp	.+480    	; 0x1fe <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 32       	cpi	r26, 0x20	; 32
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	76 d0       	rcall	.+236    	; 0x13e <main>
  52:	bb c3       	rjmp	.+1910   	; 0x7ca <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <EVENT_NewPacket>:
}


// ============================== Events =======================================
FORCE_INLINE void EVENT_NewPacket(void) {
    if(CC.RX_Pkt.CommandID == PKT_ID_CALL) {
  56:	80 91 13 01 	lds	r24, 0x0113
  5a:	8a 3c       	cpi	r24, 0xCA	; 202
  5c:	71 f4       	brne	.+28     	; 0x7a <EVENT_NewPacket+0x24>
        // Send Call packet
        CC.TX_Pkt.Address = 0;      // Broadcast
  5e:	10 92 18 01 	sts	0x0118, r1
        CC.TX_Pkt.CommandID = PKT_ID_CALL;
  62:	80 93 19 01 	sts	0x0119, r24
        CC.TX_Pkt.Data[0] = 0;
  66:	10 92 1a 01 	sts	0x011A, r1
        CC.TX_Pkt.Data[1] = 0;
  6a:	10 92 1b 01 	sts	0x011B, r1
        CC_WriteTX (&CC.TX_PktArray[0], CC_PKT_LENGTH); // Write bytes to FIFO
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	64 e0       	ldi	r22, 0x04	; 4
  74:	1d d1       	rcall	.+570    	; 0x2b0 <CC_WriteTX>
        CC_ENTER_TX();
  76:	85 e3       	ldi	r24, 0x35	; 53
  78:	98 d1       	rcall	.+816    	; 0x3aa <CC_WriteStrobe>
    }
    DelayReset(&CC_Srv.Timer);
  7a:	8b e0       	ldi	r24, 0x0B	; 11
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	b4 d0       	rcall	.+360    	; 0x1e8 <DelayReset>
    UARTSendUint(CC.RX_Pkt.RSSI);
    UARTSend(' ');
    UARTSendAsHex(CC.RX_Pkt.LQI);
    UARTNewLine();
    #endif
}
  80:	08 95       	ret

00000082 <CC_Task>:
#define CC_RX_PERIOD    270
#define CC_RX_DURATION  200

void CC_Task(void) {
    // Handle packet if received
    if (CC.NewPacketReceived) {
  82:	80 91 1e 01 	lds	r24, 0x011E
  86:	88 23       	and	r24, r24
  88:	c1 f0       	breq	.+48     	; 0xba <CC_Task+0x38>
        CC.NewPacketReceived = false;
  8a:	10 92 1e 01 	sts	0x011E, r1
}


// ============================== Events =======================================
FORCE_INLINE void EVENT_NewPacket(void) {
    if(CC.RX_Pkt.CommandID == PKT_ID_CALL) {
  8e:	80 91 13 01 	lds	r24, 0x0113
  92:	8a 3c       	cpi	r24, 0xCA	; 202
  94:	71 f4       	brne	.+28     	; 0xb2 <CC_Task+0x30>
        // Send Call packet
        CC.TX_Pkt.Address = 0;      // Broadcast
  96:	10 92 18 01 	sts	0x0118, r1
        CC.TX_Pkt.CommandID = PKT_ID_CALL;
  9a:	80 93 19 01 	sts	0x0119, r24
        CC.TX_Pkt.Data[0] = 0;
  9e:	10 92 1a 01 	sts	0x011A, r1
        CC.TX_Pkt.Data[1] = 0;
  a2:	10 92 1b 01 	sts	0x011B, r1
        CC_WriteTX (&CC.TX_PktArray[0], CC_PKT_LENGTH); // Write bytes to FIFO
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	64 e0       	ldi	r22, 0x04	; 4
  ac:	01 d1       	rcall	.+514    	; 0x2b0 <CC_WriteTX>
        CC_ENTER_TX();
  ae:	85 e3       	ldi	r24, 0x35	; 53
  b0:	7c d1       	rcall	.+760    	; 0x3aa <CC_WriteStrobe>
    }
    DelayReset(&CC_Srv.Timer);
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	98 d0       	rcall	.+304    	; 0x1e8 <DelayReset>
  b8:	08 95       	ret
        if (DelayElapsed(&CC_Srv.Timer, CC_RX_OFF_DELAY)) CC_Srv.DeepSleep = false;
        else return;
    }
*/
    // Do with CC what needed
    CC_GET_STATE();
  ba:	8d e3       	ldi	r24, 0x3D	; 61
  bc:	76 d1       	rcall	.+748    	; 0x3aa <CC_WriteStrobe>
    switch (CC.State){
  be:	80 91 11 01 	lds	r24, 0x0111
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	c1 f0       	breq	.+48     	; 0xf6 <CC_Task+0x74>
  c6:	81 31       	cpi	r24, 0x11	; 17
  c8:	18 f4       	brcc	.+6      	; 0xd0 <CC_Task+0x4e>
  ca:	88 23       	and	r24, r24
  cc:	51 f0       	breq	.+20     	; 0xe2 <CC_Task+0x60>
  ce:	08 95       	ret
  d0:	80 36       	cpi	r24, 0x60	; 96
  d2:	19 f0       	breq	.+6      	; 0xda <CC_Task+0x58>
  d4:	80 37       	cpi	r24, 0x70	; 112
  d6:	c1 f4       	brne	.+48     	; 0x108 <CC_Task+0x86>
  d8:	02 c0       	rjmp	.+4      	; 0xde <CC_Task+0x5c>
        case CC_STB_RX_OVF:
            CC_FLUSH_RX_FIFO();
  da:	8a e3       	ldi	r24, 0x3A	; 58
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <CC_Task+0x70>
            break;
        case CC_STB_TX_UNDF:
            CC_FLUSH_TX_FIFO();
  de:	8b e3       	ldi	r24, 0x3B	; 59
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <CC_Task+0x70>
            break;

        case CC_STB_IDLE:
            // Enter RX if time has come
            if(DelayElapsed(&CC_Srv.Timer, CC_RX_PERIOD)) CC_ENTER_RX();
  e2:	8b e0       	ldi	r24, 0x0B	; 11
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	6e e0       	ldi	r22, 0x0E	; 14
  e8:	71 e0       	ldi	r23, 0x01	; 1
  ea:	65 d0       	rcall	.+202    	; 0x1b6 <DelayElapsed>
  ec:	88 23       	and	r24, r24
  ee:	61 f0       	breq	.+24     	; 0x108 <CC_Task+0x86>
  f0:	84 e3       	ldi	r24, 0x34	; 52
  f2:	5b d1       	rcall	.+694    	; 0x3aa <CC_WriteStrobe>
  f4:	08 95       	ret
            break;

        case CC_STB_RX:
            // Check if time to get out of RX
            if(DelayElapsed(&CC_Srv.Timer, CC_RX_DURATION)) CC_ENTER_IDLE();
  f6:	8b e0       	ldi	r24, 0x0B	; 11
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	68 ec       	ldi	r22, 0xC8	; 200
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	5b d0       	rcall	.+182    	; 0x1b6 <DelayElapsed>
 100:	88 23       	and	r24, r24
 102:	11 f0       	breq	.+4      	; 0x108 <CC_Task+0x86>
 104:	86 e3       	ldi	r24, 0x36	; 54
 106:	51 d1       	rcall	.+674    	; 0x3aa <CC_WriteStrobe>
 108:	08 95       	ret

0000010a <GeneralInit>:
        if(DelayElapsed(&FTimer, 500)) LED_OFF();
    } // while
}

FORCE_INLINE void GeneralInit(void) {
    wdt_enable(WDTO_2S);
 10a:	2f e0       	ldi	r18, 0x0F	; 15
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	a8 95       	wdr
 116:	80 93 60 00 	sts	0x0060, r24
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	20 93 60 00 	sts	0x0060, r18
    // Shutdown all unneeded
    PRR = (1<<PRTWI)|(1<<PRSPI);
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 64 00 	sts	0x0064, r24
    ACSR = 1<<ACD;  // Disable analog comparator
 126:	80 e8       	ldi	r24, 0x80	; 128
 128:	80 bf       	out	0x30, r24	; 48
    // Setup timer
    DelayInit();    // Time counter
 12a:	3a d0       	rcall	.+116    	; 0x1a0 <DelayInit>
    // LED
    #ifndef DEBUG_UART
    LED_DDR |= 1<<LED_P;
 12c:	53 9a       	sbi	0x0a, 3	; 10
    LED_OFF();
 12e:	5b 98       	cbi	0x0b, 3	; 11
    #endif

    // CC init
    //CC_Srv.JustEnteredRX = false;
    //CC_Srv.DeepSleep = false;
    DelayReset(&CC_Srv.Timer);
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	59 d0       	rcall	.+178    	; 0x1e8 <DelayReset>
    CC_Init();
 136:	ca d1       	rcall	.+916    	; 0x4cc <CC_Init>
    CC_SetAddress(4);
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	33 d1       	rcall	.+614    	; 0x3a2 <CC_SetAddress>
}
 13c:	08 95       	ret

0000013e <main>:
    uint8_t Address;
    uint8_t Chnls[7], CurntCh;
} ELia;

// ============================== General ======================================
int main(void) {
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	00 d0       	rcall	.+0      	; 0x148 <main+0xa>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
        if(DelayElapsed(&FTimer, 500)) LED_OFF();
    } // while
}

FORCE_INLINE void GeneralInit(void) {
    wdt_enable(WDTO_2S);
 14c:	2f e0       	ldi	r18, 0x0F	; 15
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	a8 95       	wdr
 158:	80 93 60 00 	sts	0x0060, r24
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	20 93 60 00 	sts	0x0060, r18
    // Shutdown all unneeded
    PRR = (1<<PRTWI)|(1<<PRSPI);
 162:	84 e8       	ldi	r24, 0x84	; 132
 164:	80 93 64 00 	sts	0x0064, r24
    ACSR = 1<<ACD;  // Disable analog comparator
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	80 bf       	out	0x30, r24	; 48
    // Setup timer
    DelayInit();    // Time counter
 16c:	19 d0       	rcall	.+50     	; 0x1a0 <DelayInit>
    // LED
    #ifndef DEBUG_UART
    LED_DDR |= 1<<LED_P;
 16e:	53 9a       	sbi	0x0a, 3	; 10
    LED_OFF();
 170:	5b 98       	cbi	0x0b, 3	; 11
    #endif

    // CC init
    //CC_Srv.JustEnteredRX = false;
    //CC_Srv.DeepSleep = false;
    DelayReset(&CC_Srv.Timer);
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	38 d0       	rcall	.+112    	; 0x1e8 <DelayReset>
    CC_Init();
 178:	a9 d1       	rcall	.+850    	; 0x4cc <CC_Init>
    CC_SetAddress(4);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	12 d1       	rcall	.+548    	; 0x3a2 <CC_SetAddress>
    UARTInit();
    UARTSendString_P(PSTR("Lia is here\r"));
    #endif

    uint16_t FTimer;
    DelayReset(&FTimer);
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	32 d0       	rcall	.+100    	; 0x1e8 <DelayReset>

    sei(); 
 184:	78 94       	sei
    while (1) {
        wdt_reset();    // Reset watchdog
        CC_Task();

        if(DelayElapsed(&FTimer, 500)) LED_OFF();
 186:	8e 01       	movw	r16, r28
 188:	0f 5f       	subi	r16, 0xFF	; 255
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
    uint16_t FTimer;
    DelayReset(&FTimer);

    sei(); 
    while (1) {
        wdt_reset();    // Reset watchdog
 18c:	a8 95       	wdr
        CC_Task();
 18e:	79 df       	rcall	.-270    	; 0x82 <CC_Task>

        if(DelayElapsed(&FTimer, 500)) LED_OFF();
 190:	c8 01       	movw	r24, r16
 192:	64 ef       	ldi	r22, 0xF4	; 244
 194:	71 e0       	ldi	r23, 0x01	; 1
 196:	0f d0       	rcall	.+30     	; 0x1b6 <DelayElapsed>
 198:	88 23       	and	r24, r24
 19a:	c1 f3       	breq	.-16     	; 0x18c <main+0x4e>
 19c:	5b 98       	cbi	0x0b, 3	; 11
 19e:	f6 cf       	rjmp	.-20     	; 0x18c <main+0x4e>

000001a0 <DelayInit>:

volatile uint16_t TickCounter;

FORCE_INLINE void DelayInit(void) {
    // Millisecond timer initialization, with output compare interrupt enabled
    TCCR0A = (1<<WGM01);                    // CTC mode
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (0<<CS02)|(1<<CS01)|(0<<CS00); // 1 MHz/8 = 125 kHz
 1a4:	85 bd       	out	0x25, r24	; 37
    OCR0A  = 125;                           // 125 kHz / 125 = 1000 compares per second
 1a6:	8d e7       	ldi	r24, 0x7D	; 125
 1a8:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A);                  // Enable interrupt
 1aa:	ee e6       	ldi	r30, 0x6E	; 110
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
}
 1b4:	08 95       	ret

000001b6 <DelayElapsed>:

bool DelayElapsed(uint16_t *AVar, const uint16_t ADelay) {
 1b6:	fc 01       	movw	r30, r24
    bool Result = false;
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) {
 1b8:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ba:	f8 94       	cli
        if ((TickCounter - *AVar) >= ADelay) {
 1bc:	80 91 0f 01 	lds	r24, 0x010F
 1c0:	90 91 10 01 	lds	r25, 0x0110
 1c4:	20 81       	ld	r18, Z
 1c6:	31 81       	ldd	r19, Z+1	; 0x01
 1c8:	82 1b       	sub	r24, r18
 1ca:	93 0b       	sbc	r25, r19
 1cc:	86 17       	cp	r24, r22
 1ce:	97 07       	cpc	r25, r23
 1d0:	10 f4       	brcc	.+4      	; 0x1d6 <DelayElapsed+0x20>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <DelayElapsed+0x2e>
            *AVar = TickCounter;   // Reset delay
 1d6:	80 91 0f 01 	lds	r24, 0x010F
 1da:	90 91 10 01 	lds	r25, 0x0110
 1de:	91 83       	std	Z+1, r25	; 0x01
 1e0:	80 83       	st	Z, r24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1e4:	4f bf       	out	0x3f, r20	; 63
            Result = true;
        }
    } // Atomic
    return Result;
}
 1e6:	08 95       	ret

000001e8 <DelayReset>:

void DelayReset(uint16_t *AVar) {
 1e8:	fc 01       	movw	r30, r24
    ATOMIC_BLOCK (ATOMIC_RESTORESTATE) {
 1ea:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1ec:	f8 94       	cli
        *AVar = TickCounter;
 1ee:	80 91 0f 01 	lds	r24, 0x010F
 1f2:	90 91 10 01 	lds	r25, 0x0110
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1fa:	2f bf       	out	0x3f, r18	; 63
    }
}
 1fc:	08 95       	ret

000001fe <__vector_14>:

// ================================ Interrupts =================================
// Delay counter
ISR(TIMER0_COMPA_vect) {
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
    TickCounter++;
 20c:	80 91 0f 01 	lds	r24, 0x010F
 210:	90 91 10 01 	lds	r25, 0x0110
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 10 01 	sts	0x0110, r25
 21a:	80 93 0f 01 	sts	0x010F, r24
}
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <CC_WriteBurst>:
    CC_WriteRegister(CC_ADDR, AAddress);
}

// ============================= Inner use =====================================
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 22c:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 22e:	f8 94       	cli
        CC_CS_LO;                                                   // Start transmission
 230:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
 232:	48 99       	sbic	0x09, 0	; 9
 234:	fe cf       	rjmp	.-4      	; 0x232 <CC_WriteBurst+0x6>
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
 236:	80 64       	ori	r24, 0x40	; 64
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 238:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 23c:	80 91 c0 00 	lds	r24, 0x00C0
 240:	87 ff       	sbrs	r24, 7
 242:	fc cf       	rjmp	.-8      	; 0x23c <CC_WriteBurst+0x10>
    uint8_t Response = UDR0;
 244:	80 91 c6 00 	lds	r24, 0x00C6
 248:	fb 01       	movw	r30, r22
 24a:	0a c0       	rjmp	.+20     	; 0x260 <CC_WriteBurst+0x34>
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 24c:	80 81       	ld	r24, Z
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 24e:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 252:	80 91 c0 00 	lds	r24, 0x00C0
 256:	87 ff       	sbrs	r24, 7
 258:	fc cf       	rjmp	.-8      	; 0x252 <CC_WriteBurst+0x26>
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 25a:	31 96       	adiw	r30, 0x01	; 1
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
    uint8_t Response = UDR0;
 25c:	80 91 c6 00 	lds	r24, 0x00C6
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 260:	8e 2f       	mov	r24, r30
 262:	86 1b       	sub	r24, r22
 264:	84 17       	cp	r24, r20
 266:	90 f3       	brcs	.-28     	; 0x24c <CC_WriteBurst+0x20>
        CC_CS_HI;                                                   // End transmission
 268:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 26a:	5f bf       	out	0x3f, r21	; 63
    } // atomic
}
 26c:	08 95       	ret

0000026e <CC_WriteBurst_P>:
FORCE_INLINE void CC_WriteBurst_P(uint8_t ARegAddr, prog_uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 26e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 270:	f8 94       	cli
        CC_CS_LO;                                                   // Start transmission
 272:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());                                      // Wait for chip to become ready
 274:	48 99       	sbic	0x09, 0	; 9
 276:	fe cf       	rjmp	.-4      	; 0x274 <CC_WriteBurst_P+0x6>
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
 278:	80 64       	ori	r24, 0x40	; 64
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 27a:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 27e:	80 91 c0 00 	lds	r24, 0x00C0
 282:	87 ff       	sbrs	r24, 7
 284:	fc cf       	rjmp	.-8      	; 0x27e <CC_WriteBurst_P+0x10>
    uint8_t Response = UDR0;
 286:	80 91 c6 00 	lds	r24, 0x00C6
 28a:	fb 01       	movw	r30, r22
 28c:	0a c0       	rjmp	.+20     	; 0x2a2 <CC_WriteBurst_P+0x34>
FORCE_INLINE void CC_WriteBurst_P(uint8_t ARegAddr, prog_uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                      // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(pgm_read_byte (PData++));   // Write bytes themselves
 28e:	84 91       	lpm	r24, Z+
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 290:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 294:	80 91 c0 00 	lds	r24, 0x00C0
 298:	87 ff       	sbrs	r24, 7
 29a:	fc cf       	rjmp	.-8      	; 0x294 <CC_WriteBurst_P+0x26>
FORCE_INLINE void CC_WriteBurst_P(uint8_t ARegAddr, prog_uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                      // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(pgm_read_byte (PData++));   // Write bytes themselves
 29c:	31 96       	adiw	r30, 0x01	; 1
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
    uint8_t Response = UDR0;
 29e:	80 91 c6 00 	lds	r24, 0x00C6
FORCE_INLINE void CC_WriteBurst_P(uint8_t ARegAddr, prog_uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                      // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(pgm_read_byte (PData++));   // Write bytes themselves
 2a2:	8e 2f       	mov	r24, r30
 2a4:	86 1b       	sub	r24, r22
 2a6:	84 17       	cp	r24, r20
 2a8:	90 f3       	brcs	.-28     	; 0x28e <CC_WriteBurst_P+0x20>
        CC_CS_HI;                                                   // End transmission
 2aa:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ac:	2f bf       	out	0x3f, r18	; 63
    } // atomic
}
 2ae:	08 95       	ret

000002b0 <CC_WriteTX>:

FORCE_INLINE void CC_WriteTX (uint8_t *PData, uint8_t ALength){
 2b0:	48 2f       	mov	r20, r24
 2b2:	29 2f       	mov	r18, r25
    CC_WriteRegister(CC_ADDR, AAddress);
}

// ============================= Inner use =====================================
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 2b4:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2b6:	f8 94       	cli
        CC_CS_LO;                                                   // Start transmission
 2b8:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
 2ba:	48 99       	sbic	0x09, 0	; 9
 2bc:	fe cf       	rjmp	.-4      	; 0x2ba <CC_WriteTX+0xa>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 2be:	8f e7       	ldi	r24, 0x7F	; 127
 2c0:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 2c4:	80 91 c0 00 	lds	r24, 0x00C0
 2c8:	87 ff       	sbrs	r24, 7
 2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <CC_WriteTX+0x14>
    uint8_t Response = UDR0;
 2cc:	80 91 c6 00 	lds	r24, 0x00C6
 2d0:	84 2f       	mov	r24, r20
 2d2:	92 2f       	mov	r25, r18
 2d4:	9c 01       	movw	r18, r24
 2d6:	f9 01       	movw	r30, r18
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <CC_WriteTX+0x3e>
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 2da:	80 81       	ld	r24, Z
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 2dc:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <CC_WriteTX+0x30>
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 2e8:	31 96       	adiw	r30, 0x01	; 1
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
    uint8_t Response = UDR0;
 2ea:	80 91 c6 00 	lds	r24, 0x00C6
FORCE_INLINE void CC_WriteBurst(uint8_t ARegAddr, uint8_t *PData, uint8_t ALength){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                                                   // Start transmission
        while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
        CC_WriteByte(ARegAddr|CC_WRITE_FLAG|CC_BURST_FLAG);         // Address with write & burst flags
        for (uint8_t i=0; i<ALength; i++) CC_WriteByte(*PData++);   // Write bytes themselves
 2ee:	8e 2f       	mov	r24, r30
 2f0:	84 1b       	sub	r24, r20
 2f2:	86 17       	cp	r24, r22
 2f4:	90 f3       	brcs	.-28     	; 0x2da <CC_WriteTX+0x2a>
        CC_CS_HI;                                                   // End transmission
 2f6:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2f8:	5f bf       	out	0x3f, r21	; 63
    } // atomic
}

FORCE_INLINE void CC_WriteTX (uint8_t *PData, uint8_t ALength){
    CC_WriteBurst(CC_FIFO, PData, ALength);
}
 2fa:	08 95       	ret

000002fc <CC_ReadRX>:
FORCE_INLINE void CC_ReadRX  (uint8_t *PData, uint8_t ALength){
 2fc:	48 2f       	mov	r20, r24
 2fe:	29 2f       	mov	r18, r25
    CC_CS_LO;                                                   // Start transmission
 300:	5f 98       	cbi	0x0b, 7	; 11
    while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
 302:	48 99       	sbic	0x09, 0	; 9
 304:	fe cf       	rjmp	.-4      	; 0x302 <CC_ReadRX+0x6>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 30c:	80 91 c0 00 	lds	r24, 0x00C0
 310:	87 ff       	sbrs	r24, 7
 312:	fc cf       	rjmp	.-8      	; 0x30c <CC_ReadRX+0x10>
    uint8_t Response = UDR0;
 314:	80 91 c6 00 	lds	r24, 0x00C6
 318:	84 2f       	mov	r24, r20
 31a:	92 2f       	mov	r25, r18
 31c:	9c 01       	movw	r18, r24
 31e:	f9 01       	movw	r30, r18
 320:	09 c0       	rjmp	.+18     	; 0x334 <CC_ReadRX+0x38>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 322:	10 92 c6 00 	sts	0x00C6, r1
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 326:	80 91 c0 00 	lds	r24, 0x00C0
 32a:	87 ff       	sbrs	r24, 7
 32c:	fc cf       	rjmp	.-8      	; 0x326 <CC_ReadRX+0x2a>
    uint8_t Response = UDR0;
 32e:	80 91 c6 00 	lds	r24, 0x00C6
}
FORCE_INLINE void CC_ReadRX  (uint8_t *PData, uint8_t ALength){
    CC_CS_LO;                                                   // Start transmission
    while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
    CC_WriteByte(CC_FIFO|CC_READ_FLAG|CC_BURST_FLAG);           // Address with read & burst flags
    for (uint8_t i=0; i<ALength; i++) *PData++ = CC_ReadByte(); // Write bytes themselves
 332:	81 93       	st	Z+, r24
 334:	8e 2f       	mov	r24, r30
 336:	84 1b       	sub	r24, r20
 338:	86 17       	cp	r24, r22
 33a:	98 f3       	brcs	.-26     	; 0x322 <CC_ReadRX+0x26>
    CC_CS_HI;                                                   // End transmission
 33c:	5f 9a       	sbi	0x0b, 7	; 11
}
 33e:	08 95       	ret

00000340 <CC_ReadRegister>:

uint8_t CC_ReadRegister (uint8_t ARegAddr){
    uint8_t FReply;
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 340:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 342:	f8 94       	cli
        CC_CS_LO;                               // Start transmission
 344:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());                // Wait for chip to become ready
 346:	48 99       	sbic	0x09, 0	; 9
 348:	fe cf       	rjmp	.-4      	; 0x346 <CC_ReadRegister+0x6>
        CC_WriteByte(ARegAddr | CC_READ_FLAG);  // Transmit header byte: set READ bit and BURST flag
 34a:	80 68       	ori	r24, 0x80	; 128
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 34c:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 350:	80 91 c0 00 	lds	r24, 0x00C0
 354:	87 ff       	sbrs	r24, 7
 356:	fc cf       	rjmp	.-8      	; 0x350 <CC_ReadRegister+0x10>
    uint8_t Response = UDR0;
 358:	80 91 c6 00 	lds	r24, 0x00C6
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 35c:	10 92 c6 00 	sts	0x00C6, r1
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 360:	80 91 c0 00 	lds	r24, 0x00C0
 364:	87 ff       	sbrs	r24, 7
 366:	fc cf       	rjmp	.-8      	; 0x360 <CC_ReadRegister+0x20>
    uint8_t Response = UDR0;
 368:	80 91 c6 00 	lds	r24, 0x00C6
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;                               // Start transmission
        while (CC_MISO_IS_HI());                // Wait for chip to become ready
        CC_WriteByte(ARegAddr | CC_READ_FLAG);  // Transmit header byte: set READ bit and BURST flag
        FReply = CC_ReadByte();                 // Read reply
        CC_CS_HI;                               // End transmission
 36c:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 36e:	9f bf       	out	0x3f, r25	; 63
    }//atomic
    return FReply;
}
 370:	08 95       	ret

00000372 <CC_WriteRegister>:
void CC_WriteRegister (uint8_t ARegAddr, uint8_t AData){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 372:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 374:	f8 94       	cli
        CC_CS_LO;               // Start transmission
 376:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());// Wait for chip to become ready
 378:	48 99       	sbic	0x09, 0	; 9
 37a:	fe cf       	rjmp	.-4      	; 0x378 <CC_WriteRegister+0x6>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 37c:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 380:	80 91 c0 00 	lds	r24, 0x00C0
 384:	87 ff       	sbrs	r24, 7
 386:	fc cf       	rjmp	.-8      	; 0x380 <CC_WriteRegister+0xe>
    uint8_t Response = UDR0;
 388:	80 91 c6 00 	lds	r24, 0x00C6
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 38c:	60 93 c6 00 	sts	0x00C6, r22
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 390:	80 91 c0 00 	lds	r24, 0x00C0
 394:	87 ff       	sbrs	r24, 7
 396:	fc cf       	rjmp	.-8      	; 0x390 <CC_WriteRegister+0x1e>
    uint8_t Response = UDR0;
 398:	80 91 c6 00 	lds	r24, 0x00C6
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;               // Start transmission
        while (CC_MISO_IS_HI());// Wait for chip to become ready
        CC_WriteByte(ARegAddr); // Transmit header byte
        CC_WriteByte(AData);    // Write data
        CC_CS_HI;               // End transmission
 39c:	5f 9a       	sbi	0x0b, 7	; 11
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 39e:	9f bf       	out	0x3f, r25	; 63
    }//atomic
}
 3a0:	08 95       	ret

000003a2 <CC_SetAddress>:
    while (CC.State != CC_STB_IDLE) CC_ENTER_IDLE();
    // Now set channel
    CC_WriteRegister(CC_CHANNR, AChannel);
}

FORCE_INLINE void CC_SetAddress(uint8_t AAddress) {
 3a2:	68 2f       	mov	r22, r24
    CC_WriteRegister(CC_ADDR, AAddress);
 3a4:	89 e0       	ldi	r24, 0x09	; 9
 3a6:	e5 df       	rcall	.-54     	; 0x372 <CC_WriteRegister>
}
 3a8:	08 95       	ret

000003aa <CC_WriteStrobe>:
        CC_WriteByte(AData);    // Write data
        CC_CS_HI;               // End transmission
    }//atomic
}
void CC_WriteStrobe (uint8_t AStrobe){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 3aa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3ac:	f8 94       	cli
        CC_CS_LO;               // Start transmission
 3ae:	5f 98       	cbi	0x0b, 7	; 11
        while (CC_MISO_IS_HI());// Wait for chip to become ready
 3b0:	48 99       	sbic	0x09, 0	; 9
 3b2:	fe cf       	rjmp	.-4      	; 0x3b0 <CC_WriteStrobe+0x6>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 3b4:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 3b8:	80 91 c0 00 	lds	r24, 0x00C0
 3bc:	87 ff       	sbrs	r24, 7
 3be:	fc cf       	rjmp	.-8      	; 0x3b8 <CC_WriteStrobe+0xe>
    uint8_t Response = UDR0;
 3c0:	80 91 c6 00 	lds	r24, 0x00C6
void CC_WriteStrobe (uint8_t AStrobe){
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
        CC_CS_LO;               // Start transmission
        while (CC_MISO_IS_HI());// Wait for chip to become ready
        CC.State = CC_ReadWriteByte(AStrobe);  // Write strobe
        CC_CS_HI;               // End transmission
 3c4:	5f 9a       	sbi	0x0b, 7	; 11
        CC.State &= 0b01110000; // Mask needed bits
 3c6:	80 77       	andi	r24, 0x70	; 112
 3c8:	80 93 11 01 	sts	0x0111, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3cc:	9f bf       	out	0x3f, r25	; 63
    } // atomic
}
 3ce:	08 95       	ret

000003d0 <CC_SetChannel>:
    CC_RfConfig();

    CC_GDO0_IRQ_ENABLE();
}

FORCE_INLINE void CC_SetChannel(uint8_t AChannel){
 3d0:	1f 93       	push	r17
 3d2:	18 2f       	mov	r17, r24
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <CC_SetChannel+0xa>
    // CC must be in IDLE mode
    while (CC.State != CC_STB_IDLE) CC_ENTER_IDLE();
 3d6:	86 e3       	ldi	r24, 0x36	; 54
 3d8:	e8 df       	rcall	.-48     	; 0x3aa <CC_WriteStrobe>
 3da:	80 91 11 01 	lds	r24, 0x0111
 3de:	88 23       	and	r24, r24
 3e0:	d1 f7       	brne	.-12     	; 0x3d6 <CC_SetChannel+0x6>
    // Now set channel
    CC_WriteRegister(CC_CHANNR, AChannel);
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	61 2f       	mov	r22, r17
 3e6:	c5 df       	rcall	.-118    	; 0x372 <CC_WriteRegister>
}
 3e8:	1f 91       	pop	r17
 3ea:	08 95       	ret

000003ec <CC_RfConfig>:
    } // atomic
}

// **** Used to setup CC with needed values ****
void CC_RfConfig(void){
    CC_WriteRegister(CC_FSCTRL1,  CC_FSCTRL1_VALUE);    // Frequency synthesizer control.
 3ec:	8b e0       	ldi	r24, 0x0B	; 11
 3ee:	66 e0       	ldi	r22, 0x06	; 6
 3f0:	c0 df       	rcall	.-128    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSCTRL0,  CC_FSCTRL0_VALUE);    // Frequency synthesizer control.
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	bd df       	rcall	.-134    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FREQ2,    CC_FREQ2_VALUE);      // Frequency control word, high byte.
 3f8:	8d e0       	ldi	r24, 0x0D	; 13
 3fa:	6c e5       	ldi	r22, 0x5C	; 92
 3fc:	ba df       	rcall	.-140    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FREQ1,    CC_FREQ1_VALUE);      // Frequency control word, middle byte.
 3fe:	8e e0       	ldi	r24, 0x0E	; 14
 400:	6e e4       	ldi	r22, 0x4E	; 78
 402:	b7 df       	rcall	.-146    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FREQ0,    CC_FREQ0_VALUE);      // Frequency control word, low byte.
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	65 ec       	ldi	r22, 0xC5	; 197
 408:	b4 df       	rcall	.-152    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MDMCFG4,  CC_MDMCFG4_VALUE);    // Modem configuration.
 40a:	80 e1       	ldi	r24, 0x10	; 16
 40c:	68 e7       	ldi	r22, 0x78	; 120
 40e:	b1 df       	rcall	.-158    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MDMCFG3,  CC_MDMCFG3_VALUE);    // Modem configuration.
 410:	81 e1       	ldi	r24, 0x11	; 17
 412:	63 e9       	ldi	r22, 0x93	; 147
 414:	ae df       	rcall	.-164    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MDMCFG2,  CC_MDMCFG2_VALUE);    // Modem configuration.
 416:	82 e1       	ldi	r24, 0x12	; 18
 418:	63 e0       	ldi	r22, 0x03	; 3
 41a:	ab df       	rcall	.-170    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MDMCFG1,  CC_MDMCFG1_VALUE);    // Modem configuration.
 41c:	83 e1       	ldi	r24, 0x13	; 19
 41e:	63 ea       	ldi	r22, 0xA3	; 163
 420:	a8 df       	rcall	.-176    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MDMCFG0,  CC_MDMCFG0_VALUE);    // Modem configuration.
 422:	84 e1       	ldi	r24, 0x14	; 20
 424:	68 e9       	ldi	r22, 0x98	; 152
 426:	a5 df       	rcall	.-182    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_CHANNR,   CC_CHANNR_VALUE);     // Channel number.
 428:	8a e0       	ldi	r24, 0x0A	; 10
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	a2 df       	rcall	.-188    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_DEVIATN,  CC_DEVIATN_VALUE);    // Modem deviation setting (when FSK modulation is enabled).
 42e:	85 e1       	ldi	r24, 0x15	; 21
 430:	64 e4       	ldi	r22, 0x44	; 68
 432:	9f df       	rcall	.-194    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FREND1,   CC_FREND1_VALUE);     // Front end RX configuration.
 434:	81 e2       	ldi	r24, 0x21	; 33
 436:	66 e5       	ldi	r22, 0x56	; 86
 438:	9c df       	rcall	.-200    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FREND0,   CC_FREND0_VALUE);     // Front end RX configuration.
 43a:	82 e2       	ldi	r24, 0x22	; 34
 43c:	60 e1       	ldi	r22, 0x10	; 16
 43e:	99 df       	rcall	.-206    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MCSM0,    CC_MCSM0_VALUE);      // Main Radio Control State Machine configuration.
 440:	88 e1       	ldi	r24, 0x18	; 24
 442:	68 e1       	ldi	r22, 0x18	; 24
 444:	96 df       	rcall	.-212    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FOCCFG,   CC_FOCCFG_VALUE);     // Frequency Offset Compensation Configuration.
 446:	89 e1       	ldi	r24, 0x19	; 25
 448:	66 e1       	ldi	r22, 0x16	; 22
 44a:	93 df       	rcall	.-218    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_BSCFG,    CC_BSCFG_VALUE);      // Bit synchronization Configuration.
 44c:	8a e1       	ldi	r24, 0x1A	; 26
 44e:	6c e6       	ldi	r22, 0x6C	; 108
 450:	90 df       	rcall	.-224    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_AGCCTRL2, CC_AGCCTRL2_VALUE);   // AGC control.
 452:	8b e1       	ldi	r24, 0x1B	; 27
 454:	63 e4       	ldi	r22, 0x43	; 67
 456:	8d df       	rcall	.-230    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_AGCCTRL1, CC_AGCCTRL1_VALUE);   // AGC control.
 458:	8c e1       	ldi	r24, 0x1C	; 28
 45a:	60 e4       	ldi	r22, 0x40	; 64
 45c:	8a df       	rcall	.-236    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_AGCCTRL0, CC_AGCCTRL0_VALUE);   // AGC control.
 45e:	8d e1       	ldi	r24, 0x1D	; 29
 460:	61 e9       	ldi	r22, 0x91	; 145
 462:	87 df       	rcall	.-242    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSCAL3,   CC_FSCAL3_VALUE);     // Frequency synthesizer calibration.
 464:	83 e2       	ldi	r24, 0x23	; 35
 466:	69 ea       	ldi	r22, 0xA9	; 169
 468:	84 df       	rcall	.-248    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSCAL2,   CC_FSCAL2_VALUE);     // Frequency synthesizer calibration.
 46a:	84 e2       	ldi	r24, 0x24	; 36
 46c:	6a e0       	ldi	r22, 0x0A	; 10
 46e:	81 df       	rcall	.-254    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSCAL1,   CC_FSCAL1_VALUE);     // Frequency synthesizer calibration.
 470:	85 e2       	ldi	r24, 0x25	; 37
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	7e df       	rcall	.-260    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSCAL0,   CC_FSCAL0_VALUE);     // Frequency synthesizer calibration.
 476:	86 e2       	ldi	r24, 0x26	; 38
 478:	61 e1       	ldi	r22, 0x11	; 17
 47a:	7b df       	rcall	.-266    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FSTEST,   CC_FSTEST_VALUE);     // Frequency synthesizer calibration.
 47c:	89 e2       	ldi	r24, 0x29	; 41
 47e:	69 e5       	ldi	r22, 0x59	; 89
 480:	78 df       	rcall	.-272    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_TEST2,    CC_TEST2_VALUE);      // Various test settings.
 482:	8c e2       	ldi	r24, 0x2C	; 44
 484:	68 e8       	ldi	r22, 0x88	; 136
 486:	75 df       	rcall	.-278    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_TEST1,    CC_TEST1_VALUE);      // Various test settings.
 488:	8d e2       	ldi	r24, 0x2D	; 45
 48a:	61 e3       	ldi	r22, 0x31	; 49
 48c:	72 df       	rcall	.-284    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_TEST0,    CC_TEST0_VALUE);      // Various test settings.
 48e:	8e e2       	ldi	r24, 0x2E	; 46
 490:	6b e0       	ldi	r22, 0x0B	; 11
 492:	6f df       	rcall	.-290    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_FIFOTHR,  CC_FIFOTHR_VALUE);    // fifo threshold
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	67 e0       	ldi	r22, 0x07	; 7
 498:	6c df       	rcall	.-296    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_IOCFG2,   CC_IOCFG2_VALUE);     // GDO2 output pin configuration.
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	6e e0       	ldi	r22, 0x0E	; 14
 49e:	69 df       	rcall	.-302    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_IOCFG0,   CC_IOCFG0_VALUE);     // GDO0 output pin configuration.
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	66 df       	rcall	.-308    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_PKTCTRL1, CC_PKTCTRL1_VALUE);   // Packet automation control.
 4a6:	87 e0       	ldi	r24, 0x07	; 7
 4a8:	6e e0       	ldi	r22, 0x0E	; 14
 4aa:	63 df       	rcall	.-314    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_PKTCTRL0, CC_PKTCTRL0_VALUE);   // Packet automation control.
 4ac:	88 e0       	ldi	r24, 0x08	; 8
 4ae:	64 e4       	ldi	r22, 0x44	; 68
 4b0:	60 df       	rcall	.-320    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_PKTLEN,   CC_PKTLEN_VALUE);     // Packet length.
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	64 e0       	ldi	r22, 0x04	; 4
 4b6:	5d df       	rcall	.-326    	; 0x372 <CC_WriteRegister>

    CC_WriteRegister(CC_PATABLE, CC_PATABLE0_VALUE);
 4b8:	8e e3       	ldi	r24, 0x3E	; 62
 4ba:	6e ef       	ldi	r22, 0xFE	; 254
 4bc:	5a df       	rcall	.-332    	; 0x372 <CC_WriteRegister>
    
    CC_WriteRegister(CC_MCSM2, CC_MCSM2_VALUE);
 4be:	86 e1       	ldi	r24, 0x16	; 22
 4c0:	67 e0       	ldi	r22, 0x07	; 7
 4c2:	57 df       	rcall	.-338    	; 0x372 <CC_WriteRegister>
    CC_WriteRegister(CC_MCSM1, CC_MCSM1_VALUE);
 4c4:	87 e1       	ldi	r24, 0x17	; 23
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	54 df       	rcall	.-344    	; 0x372 <CC_WriteRegister>
}
 4ca:	08 95       	ret

000004cc <CC_Init>:
struct CC_t CC;

void CC_Init(void){
    // ******** Hardware init section *******
    // Interrupts
    CC_GDO0_IRQ_DISABLE();
 4cc:	e8 98       	cbi	0x1d, 0	; 29
    EICRA |= (1<<ISC01)|(0<<ISC00); // Falling edge generates an interrupt
 4ce:	e9 e6       	ldi	r30, 0x69	; 105
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	82 60       	ori	r24, 0x02	; 2
 4d6:	80 83       	st	Z, r24
    EIFR  |= (1<<INTF0);            // Clear IRQ flag
 4d8:	e0 9a       	sbi	0x1c, 0	; 28
    // Setup ports
    CC_DDR  &= ~((1<<CC_GDO0)|(1<<CC_MISO));
 4da:	8a b1       	in	r24, 0x0a	; 10
 4dc:	8a 7f       	andi	r24, 0xFA	; 250
 4de:	8a b9       	out	0x0a, r24	; 10
    CC_DDR  |=   (1<<CC_CS)|(1<<CC_MOSI)|(1<<CC_SCLK);
 4e0:	8a b1       	in	r24, 0x0a	; 10
 4e2:	82 69       	ori	r24, 0x92	; 146
 4e4:	8a b9       	out	0x0a, r24	; 10
    CC_PORT |=   (1<<CC_GDO0)|(CC_MISO); // Enable pull-ups
 4e6:	5a 9a       	sbi	0x0b, 2	; 11
    // Set initial values
    CC_SCLK_LO;
 4e8:	5c 98       	cbi	0x0b, 4	; 11
    CC_CS_HI;
 4ea:	5f 9a       	sbi	0x0b, 7	; 11
    // Setup SPI: MSB first, master, SCK idle low, f/4
    //SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(0<<SPR0);
    //SPSR = (1<<SPI2X);
    // Setup UART as SPI: all the same as above
    UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<UDORD0)|(0<<UCPHA0)|(0<<UCPOL0);
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 4f2:	88 e1       	ldi	r24, 0x18	; 24
 4f4:	80 93 c1 00 	sts	0x00C1, r24
    UBRR0 = 1;
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 c5 00 	sts	0x00C5, r25
 500:	80 93 c4 00 	sts	0x00C4, r24

    // ******* Firmware init section *******
    CC.NewPacketReceived = false;
 504:	10 92 1e 01 	sts	0x011E, r1
    CC_RESET();
 508:	80 e3       	ldi	r24, 0x30	; 48
 50a:	4f df       	rcall	.-354    	; 0x3aa <CC_WriteStrobe>
    CC_FLUSH_RX_FIFO();
 50c:	8a e3       	ldi	r24, 0x3A	; 58
 50e:	4d df       	rcall	.-358    	; 0x3aa <CC_WriteStrobe>
    CC_RfConfig();
 510:	6d df       	rcall	.-294    	; 0x3ec <CC_RfConfig>

    CC_GDO0_IRQ_ENABLE();
 512:	e8 9a       	sbi	0x1d, 0	; 29
}
 514:	08 95       	ret

00000516 <CC_ReadWriteByte>:
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 516:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 51a:	80 91 c0 00 	lds	r24, 0x00C0
 51e:	87 ff       	sbrs	r24, 7
 520:	fc cf       	rjmp	.-8      	; 0x51a <CC_ReadWriteByte+0x4>
    uint8_t Response = UDR0;
 522:	80 91 c6 00 	lds	r24, 0x00C6
    return Response;
}
 526:	08 95       	ret

00000528 <__vector_1>:

// ============================ Interrupts =====================================
ISR(INT0_vect) {    // TODO: Carefully rewrite this handler, as it can easily destroy memory in case of RX_FIFO is bigger than PKT_LENGTH. Replace GDO_0 behavior, too.
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
    //PORTC |= (1<<PC0); // DEBUG
    // Packet has been successfully recieved
    uint8_t FifoSize = CC_ReadRegister(CC_RXBYTES); // Get bytes in FIFO
 54a:	8b e7       	ldi	r24, 0x7B	; 123
 54c:	f9 de       	rcall	.-526    	; 0x340 <CC_ReadRegister>
 54e:	98 2f       	mov	r25, r24
    if (FifoSize > 0) {
 550:	88 23       	and	r24, r24
 552:	19 f1       	breq	.+70     	; 0x59a <__vector_1+0x72>

FORCE_INLINE void CC_WriteTX (uint8_t *PData, uint8_t ALength){
    CC_WriteBurst(CC_FIFO, PData, ALength);
}
FORCE_INLINE void CC_ReadRX  (uint8_t *PData, uint8_t ALength){
    CC_CS_LO;                                                   // Start transmission
 554:	5f 98       	cbi	0x0b, 7	; 11
    while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
 556:	48 99       	sbic	0x09, 0	; 9
 558:	fe cf       	rjmp	.-4      	; 0x556 <__vector_1+0x2e>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	80 93 c6 00 	sts	0x00C6, r24
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 560:	80 91 c0 00 	lds	r24, 0x00C0
 564:	87 ff       	sbrs	r24, 7
 566:	fc cf       	rjmp	.-8      	; 0x560 <__vector_1+0x38>
    uint8_t Response = UDR0;
 568:	80 91 c6 00 	lds	r24, 0x00C6
 56c:	e2 e1       	ldi	r30, 0x12	; 18
 56e:	f1 e0       	ldi	r31, 0x01	; 1
}
FORCE_INLINE void CC_ReadRX  (uint8_t *PData, uint8_t ALength){
    CC_CS_LO;                                                   // Start transmission
    while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
    CC_WriteByte(CC_FIFO|CC_READ_FLAG|CC_BURST_FLAG);           // Address with read & burst flags
    for (uint8_t i=0; i<ALength; i++) *PData++ = CC_ReadByte(); // Write bytes themselves
 570:	29 2f       	mov	r18, r25
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	2e 0f       	add	r18, r30
 576:	3f 1f       	adc	r19, r31
 578:	09 c0       	rjmp	.+18     	; 0x58c <__vector_1+0x64>
}


// ============================= Low level =====================================
uint8_t CC_ReadWriteByte(uint8_t AByte){
    UDR0 = AByte;	// Start transmission
 57a:	10 92 c6 00 	sts	0x00C6, r1
    // Wait for transmission to complete
    //while (bit_is_clear (UCSR0A, TXC0));    // Wait until transmission completed
    while (bit_is_clear (UCSR0A, RXC0));    // Wait until reception completed
 57e:	80 91 c0 00 	lds	r24, 0x00C0
 582:	87 ff       	sbrs	r24, 7
 584:	fc cf       	rjmp	.-8      	; 0x57e <__vector_1+0x56>
    uint8_t Response = UDR0;
 586:	80 91 c6 00 	lds	r24, 0x00C6
}
FORCE_INLINE void CC_ReadRX  (uint8_t *PData, uint8_t ALength){
    CC_CS_LO;                                                   // Start transmission
    while (CC_MISO_IS_HI());                                    // Wait for chip to become ready
    CC_WriteByte(CC_FIFO|CC_READ_FLAG|CC_BURST_FLAG);           // Address with read & burst flags
    for (uint8_t i=0; i<ALength; i++) *PData++ = CC_ReadByte(); // Write bytes themselves
 58a:	81 93       	st	Z+, r24
 58c:	e2 17       	cp	r30, r18
 58e:	f3 07       	cpc	r31, r19
 590:	a1 f7       	brne	.-24     	; 0x57a <__vector_1+0x52>
    CC_CS_HI;                                                   // End transmission
 592:	5f 9a       	sbi	0x0b, 7	; 11
    //PORTC |= (1<<PC0); // DEBUG
    // Packet has been successfully recieved
    uint8_t FifoSize = CC_ReadRegister(CC_RXBYTES); // Get bytes in FIFO
    if (FifoSize > 0) {
        CC_ReadRX(&CC.RX_PktArray[0], FifoSize);
        CC.NewPacketReceived = true;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 1e 01 	sts	0x011E, r24
    }
    //PORTC &= ~(1<<PC0);
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <UARTInit>:
// ************** Implementation ***********************
void UARTInit (void) {
    // Setup port
    //UARTDDR  &= ~(1<<RxPin);	// RX_PIN is input
    //UARTPort |=  (1<<RxPin);
    SET_TX_PIN ();		// Set the TX line to idle state
 5bc:	5b 9a       	sbi	0x0b, 3	; 11
    UARTDDR  |=  (1<<TxPin);	// TX_PIN is output
 5be:	53 9a       	sbi	0x0a, 3	; 10
//    MCUCR = 0x00;		// Set IRQ0 to low level
//    GIFR = (1<<INTF0);
//    GIMSK = (1<<INT0);
}
 5c0:	08 95       	ret

000005c2 <UARTSend>:
void UARTSend (uint8_t AByte) {
    uint8_t i;
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 5c2:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5c4:	f8 94       	cli
        // send start bit
        CLEAR_TX_PIN ();
 5c6:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	9a 95       	dec	r25
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <UARTSend+0x8>
 5ce:	20 e0       	ldi	r18, 0x00	; 0
        _delay_us (UARTTxOneBit+1);
        // Send data bits
        for (i=0; i<8; i++, AByte >>=1) {
            if (AByte & 1) SET_TX_PIN ();  // send 1
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	80 ff       	sbrs	r24, 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <UARTSend+0x18>
 5d6:	5b 9a       	sbi	0x0b, 3	; 11
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <UARTSend+0x1a>
            else CLEAR_TX_PIN ();          // send 0
 5da:	5b 98       	cbi	0x0b, 3	; 11
 5dc:	94 2f       	mov	r25, r20
 5de:	9a 95       	dec	r25
 5e0:	f1 f7       	brne	.-4      	; 0x5de <UARTSend+0x1c>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
        // send start bit
        CLEAR_TX_PIN ();
        _delay_us (UARTTxOneBit+1);
        // Send data bits
        for (i=0; i<8; i++, AByte >>=1) {
 5e2:	2f 5f       	subi	r18, 0xFF	; 255
 5e4:	28 30       	cpi	r18, 0x08	; 8
 5e6:	11 f0       	breq	.+4      	; 0x5ec <UARTSend+0x2a>
 5e8:	86 95       	lsr	r24
 5ea:	f3 cf       	rjmp	.-26     	; 0x5d2 <UARTSend+0x10>
            if (AByte & 1) SET_TX_PIN ();  // send 1
            else CLEAR_TX_PIN ();          // send 0
            _delay_us (UARTTxOneBit);
        }
        // Send stop bit
        SET_TX_PIN ();	// send 1
 5ec:	5b 9a       	sbi	0x0b, 3	; 11
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	8a 95       	dec	r24
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <UARTSend+0x2e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5f4:	3f bf       	out	0x3f, r19	; 63
        _delay_us (UARTTxOneBit);
    } //ATOMIC_BLOCK
}
 5f6:	08 95       	ret

000005f8 <UARTSendAsHex>:
void UARTSendAsHex (uint8_t AByte){
 5f8:	1f 93       	push	r17
 5fa:	18 2f       	mov	r17, r24
    UARTSend(UintToHexChar (AByte >> 4));
 5fc:	82 95       	swap	r24
 5fe:	8f 70       	andi	r24, 0x0F	; 15
    UARTSend(UintToHexChar (AByte & 0x0F));
}

char UintToHexChar (uint8_t b) {
    return ((b<=0x09) ? (b+'0') : (b+'A'-10));
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	10 f4       	brcc	.+4      	; 0x608 <UARTSendAsHex+0x10>
 604:	80 5d       	subi	r24, 0xD0	; 208
 606:	01 c0       	rjmp	.+2      	; 0x60a <UARTSendAsHex+0x12>
 608:	89 5c       	subi	r24, 0xC9	; 201
        SET_TX_PIN ();	// send 1
        _delay_us (UARTTxOneBit);
    } //ATOMIC_BLOCK
}
void UARTSendAsHex (uint8_t AByte){
    UARTSend(UintToHexChar (AByte >> 4));
 60a:	db df       	rcall	.-74     	; 0x5c2 <UARTSend>
    UARTSend(UintToHexChar (AByte & 0x0F));
 60c:	81 2f       	mov	r24, r17
 60e:	8f 70       	andi	r24, 0x0F	; 15
}

char UintToHexChar (uint8_t b) {
    return ((b<=0x09) ? (b+'0') : (b+'A'-10));
 610:	8a 30       	cpi	r24, 0x0A	; 10
 612:	10 f4       	brcc	.+4      	; 0x618 <UARTSendAsHex+0x20>
 614:	80 5d       	subi	r24, 0xD0	; 208
 616:	01 c0       	rjmp	.+2      	; 0x61a <UARTSendAsHex+0x22>
 618:	89 5c       	subi	r24, 0xC9	; 201
        _delay_us (UARTTxOneBit);
    } //ATOMIC_BLOCK
}
void UARTSendAsHex (uint8_t AByte){
    UARTSend(UintToHexChar (AByte >> 4));
    UARTSend(UintToHexChar (AByte & 0x0F));
 61a:	d3 df       	rcall	.-90     	; 0x5c2 <UARTSend>
}
 61c:	1f 91       	pop	r17
 61e:	08 95       	ret

00000620 <UintToHexChar>:

char UintToHexChar (uint8_t b) {
    return ((b<=0x09) ? (b+'0') : (b+'A'-10));
 620:	8a 30       	cpi	r24, 0x0A	; 10
 622:	10 f4       	brcc	.+4      	; 0x628 <UintToHexChar+0x8>
 624:	80 5d       	subi	r24, 0xD0	; 208
 626:	08 95       	ret
 628:	89 5c       	subi	r24, 0xC9	; 201
}
 62a:	08 95       	ret

0000062c <UARTNewLine>:


// ============================== High-level ===================================
void UARTNewLine (void) {
    UARTSend ('\r');
 62c:	8d e0       	ldi	r24, 0x0D	; 13
 62e:	c9 df       	rcall	.-110    	; 0x5c2 <UARTSend>
}
 630:	08 95       	ret

00000632 <UARTSendUint>:

// Send as digits
void UARTSendUint (uint16_t ANumber) {
 632:	ef 92       	push	r14
 634:	ff 92       	push	r15
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	9c 01       	movw	r18, r24
 63c:	60 e1       	ldi	r22, 0x10	; 16
 63e:	77 e2       	ldi	r23, 0x27	; 39
 640:	b0 d0       	rcall	.+352    	; 0x7a2 <__udivmodhi4>
 642:	18 2f       	mov	r17, r24
 644:	09 2f       	mov	r16, r25
 646:	c9 01       	movw	r24, r18
 648:	60 e1       	ldi	r22, 0x10	; 16
 64a:	77 e2       	ldi	r23, 0x27	; 39
 64c:	aa d0       	rcall	.+340    	; 0x7a2 <__udivmodhi4>
 64e:	60 5d       	subi	r22, 0xD0	; 208
    // >10000
    while (ANumber >= 10000) {
        digit++;
        ANumber -= 10000;
    }
    if (digit != '0'){
 650:	60 33       	cpi	r22, 0x30	; 48
 652:	11 f4       	brne	.+4      	; 0x658 <UARTSendUint+0x26>
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	03 c0       	rjmp	.+6      	; 0x65e <UARTSendUint+0x2c>
        UARTSend (digit);
 658:	86 2f       	mov	r24, r22
 65a:	b3 df       	rcall	.-154    	; 0x5c2 <UARTSend>
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	81 2f       	mov	r24, r17
 660:	90 2f       	mov	r25, r16
 662:	68 ee       	ldi	r22, 0xE8	; 232
 664:	73 e0       	ldi	r23, 0x03	; 3
 666:	9d d0       	rcall	.+314    	; 0x7a2 <__udivmodhi4>
 668:	f8 2e       	mov	r15, r24
 66a:	e9 2e       	mov	r14, r25
 66c:	81 2f       	mov	r24, r17
 66e:	90 2f       	mov	r25, r16
 670:	68 ee       	ldi	r22, 0xE8	; 232
 672:	73 e0       	ldi	r23, 0x03	; 3
 674:	96 d0       	rcall	.+300    	; 0x7a2 <__udivmodhi4>
 676:	60 5d       	subi	r22, 0xD0	; 208
    // >1000
    while (ANumber >= 1000){
        digit++;
        ANumber -= 1000;
    }
    if ((digit != '0') || ShouldPrint) {
 678:	60 33       	cpi	r22, 0x30	; 48
 67a:	11 f4       	brne	.+4      	; 0x680 <UARTSendUint+0x4e>
 67c:	22 23       	and	r18, r18
 67e:	19 f0       	breq	.+6      	; 0x686 <UARTSendUint+0x54>
        UARTSend (digit);
 680:	86 2f       	mov	r24, r22
 682:	9f df       	rcall	.-194    	; 0x5c2 <UARTSend>
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	8f 2d       	mov	r24, r15
 688:	9e 2d       	mov	r25, r14
 68a:	64 e6       	ldi	r22, 0x64	; 100
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	89 d0       	rcall	.+274    	; 0x7a2 <__udivmodhi4>
 690:	18 2f       	mov	r17, r24
 692:	09 2f       	mov	r16, r25
 694:	8f 2d       	mov	r24, r15
 696:	9e 2d       	mov	r25, r14
 698:	64 e6       	ldi	r22, 0x64	; 100
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	82 d0       	rcall	.+260    	; 0x7a2 <__udivmodhi4>
 69e:	60 5d       	subi	r22, 0xD0	; 208
    // > 100
    while (ANumber >= 100) {		// Still larger than 100 ?
        digit++;			// Increment first digit
        ANumber -= 100;
    }
    if ((digit != '0') || ShouldPrint) {
 6a0:	60 33       	cpi	r22, 0x30	; 48
 6a2:	11 f4       	brne	.+4      	; 0x6a8 <UARTSendUint+0x76>
 6a4:	22 23       	and	r18, r18
 6a6:	11 f0       	breq	.+4      	; 0x6ac <UARTSendUint+0x7a>
            UARTSend (digit);
 6a8:	86 2f       	mov	r24, r22
 6aa:	8b df       	rcall	.-234    	; 0x5c2 <UARTSend>
    // > 10
    while (ANumber >= 10) {		// Still larger than 10 ?
        digit++;			// Increment second digit
        ANumber -= 10;
    }
    UARTSend (digit);
 6ac:	81 2f       	mov	r24, r17
 6ae:	90 2f       	mov	r25, r16
 6b0:	6a e0       	ldi	r22, 0x0A	; 10
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	76 d0       	rcall	.+236    	; 0x7a2 <__udivmodhi4>
 6b6:	86 2f       	mov	r24, r22
 6b8:	80 5d       	subi	r24, 0xD0	; 208
 6ba:	83 df       	rcall	.-250    	; 0x5c2 <UARTSend>
    UARTSend ('0'+ANumber);
 6bc:	81 2f       	mov	r24, r17
 6be:	90 2f       	mov	r25, r16
 6c0:	6a e0       	ldi	r22, 0x0A	; 10
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	6e d0       	rcall	.+220    	; 0x7a2 <__udivmodhi4>
 6c6:	80 5d       	subi	r24, 0xD0	; 208
 6c8:	7c df       	rcall	.-264    	; 0x5c2 <UARTSend>
}
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	08 95       	ret

000006d4 <UARTSendInt>:
void UARTSendInt (int16_t ANumber) {
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	ec 01       	movw	r28, r24
    if (ANumber < 0) {
 6da:	97 ff       	sbrs	r25, 7
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <UARTSendInt+0x16>
        UARTSend ('-');
 6de:	8d e2       	ldi	r24, 0x2D	; 45
 6e0:	70 df       	rcall	.-288    	; 0x5c2 <UARTSend>
        ANumber = -ANumber;
 6e2:	d0 95       	com	r29
 6e4:	c1 95       	neg	r28
 6e6:	df 4f       	sbci	r29, 0xFF	; 255
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <UARTSendInt+0x1a>
    }
    else UARTSend (' ');
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	6a df       	rcall	.-300    	; 0x5c2 <UARTSend>
    UARTSendUint (ANumber);
 6ee:	ce 01       	movw	r24, r28
 6f0:	a0 df       	rcall	.-192    	; 0x632 <UARTSendUint>
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <UARTSendString>:


void UARTSendString (const char *S) {
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	ec 01       	movw	r28, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <UARTSendString+0xc>
    while (*S != '\0') UARTSend (*S++);
 700:	21 96       	adiw	r28, 0x01	; 1
 702:	5f df       	rcall	.-322    	; 0x5c2 <UARTSend>
 704:	88 81       	ld	r24, Y
 706:	88 23       	and	r24, r24
 708:	d9 f7       	brne	.-10     	; 0x700 <UARTSendString+0x8>
}
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <UARTSendStringLen>:
void UARTSendStringLen (const char *S, const uint8_t ALength) {
 710:	0f 93       	push	r16
 712:	1f 93       	push	r17
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	18 2f       	mov	r17, r24
 71a:	06 2f       	mov	r16, r22
 71c:	28 2f       	mov	r18, r24
 71e:	39 2f       	mov	r19, r25
 720:	e9 01       	movw	r28, r18
 722:	02 c0       	rjmp	.+4      	; 0x728 <UARTSendStringLen+0x18>
    for (uint8_t i=0; i<ALength; i++) UARTSend (*S++);
 724:	89 91       	ld	r24, Y+
 726:	4d df       	rcall	.-358    	; 0x5c2 <UARTSend>
 728:	9e 01       	movw	r18, r28
 72a:	21 1b       	sub	r18, r17
 72c:	20 17       	cp	r18, r16
 72e:	d0 f3       	brcs	.-12     	; 0x724 <UARTSendStringLen+0x14>
}
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <UARTSendString_P>:
void UARTSendString_P (const char *S) {
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	ec 01       	movw	r28, r24
    uint8_t FChar;
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 742:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 744:	f8 94       	cli
 746:	01 c0       	rjmp	.+2      	; 0x74a <UARTSendString_P+0x10>
        while ((FChar = pgm_read_byte(S++)) != '\0') UARTSend (FChar);
 748:	3c df       	rcall	.-392    	; 0x5c2 <UARTSend>
 74a:	fe 01       	movw	r30, r28
 74c:	21 96       	adiw	r28, 0x01	; 1
 74e:	84 91       	lpm	r24, Z+
 750:	88 23       	and	r24, r24
 752:	d1 f7       	brne	.-12     	; 0x748 <UARTSendString_P+0xe>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 754:	1f bf       	out	0x3f, r17	; 63
    }
}
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	08 95       	ret

0000075e <UARTSendArr>:

void UARTSendArr (uint8_t *Arr, uint8_t ALength) {
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	ec 01       	movw	r28, r24
 766:	16 2f       	mov	r17, r22
 768:	03 c0       	rjmp	.+6      	; 0x770 <UARTSendArr+0x12>
    while (ALength--) UARTSend(*(Arr++));
 76a:	89 91       	ld	r24, Y+
 76c:	2a df       	rcall	.-428    	; 0x5c2 <UARTSend>
 76e:	11 50       	subi	r17, 0x01	; 1
 770:	11 23       	and	r17, r17
 772:	d9 f7       	brne	.-10     	; 0x76a <UARTSendArr+0xc>
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	1f 91       	pop	r17
 77a:	08 95       	ret

0000077c <UARTSendArrAsString>:

void UARTSendArrAsString (uint8_t *Arr, uint8_t ALength) {
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	ec 01       	movw	r28, r24
 784:	16 2f       	mov	r17, r22
 786:	06 c0       	rjmp	.+12     	; 0x794 <UARTSendArrAsString+0x18>
    while (ALength--) { 
        UARTSendUint(*(Arr++));
 788:	89 91       	ld	r24, Y+
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	52 df       	rcall	.-348    	; 0x632 <UARTSendUint>
        UARTSend (' ');
 78e:	80 e2       	ldi	r24, 0x20	; 32
 790:	18 df       	rcall	.-464    	; 0x5c2 <UARTSend>
 792:	11 50       	subi	r17, 0x01	; 1
void UARTSendArr (uint8_t *Arr, uint8_t ALength) {
    while (ALength--) UARTSend(*(Arr++));
}

void UARTSendArrAsString (uint8_t *Arr, uint8_t ALength) {
    while (ALength--) { 
 794:	11 23       	and	r17, r17
 796:	c1 f7       	brne	.-16     	; 0x788 <UARTSendArrAsString+0xc>
        UARTSendUint(*(Arr++));
        UARTSend (' ');
    }
    UARTNewLine();
 798:	49 df       	rcall	.-366    	; 0x62c <UARTNewLine>
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	08 95       	ret

000007a2 <__udivmodhi4>:
 7a2:	aa 1b       	sub	r26, r26
 7a4:	bb 1b       	sub	r27, r27
 7a6:	51 e1       	ldi	r21, 0x11	; 17
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <__udivmodhi4_ep>

000007aa <__udivmodhi4_loop>:
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	a6 17       	cp	r26, r22
 7b0:	b7 07       	cpc	r27, r23
 7b2:	10 f0       	brcs	.+4      	; 0x7b8 <__udivmodhi4_ep>
 7b4:	a6 1b       	sub	r26, r22
 7b6:	b7 0b       	sbc	r27, r23

000007b8 <__udivmodhi4_ep>:
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	5a 95       	dec	r21
 7be:	a9 f7       	brne	.-22     	; 0x7aa <__udivmodhi4_loop>
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	08 95       	ret

000007ca <_exit>:
 7ca:	f8 94       	cli

000007cc <__stop_program>:
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <__stop_program>
