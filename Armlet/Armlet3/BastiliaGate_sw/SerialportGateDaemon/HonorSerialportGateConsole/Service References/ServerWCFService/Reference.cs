//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HonorSerialportGateConsole.ServerWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerUpdate", Namespace="http://schemas.datacontract.org/2004/07/NetworkLevel.WCFServices")]
    [System.SerializableAttribute()]
    public partial class PlayerUpdate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ArmletIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NewBloodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NewRoomField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ArmletID {
            get {
                return this.ArmletIDField;
            }
            set {
                if ((this.ArmletIDField.Equals(value) != true)) {
                    this.ArmletIDField = value;
                    this.RaisePropertyChanged("ArmletID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NewBlood {
            get {
                return this.NewBloodField;
            }
            set {
                if ((this.NewBloodField.Equals(value) != true)) {
                    this.NewBloodField = value;
                    this.RaisePropertyChanged("NewBlood");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NewRoom {
            get {
                return this.NewRoomField;
            }
            set {
                if ((this.NewRoomField.Equals(value) != true)) {
                    this.NewRoomField = value;
                    this.RaisePropertyChanged("NewRoom");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerWCFService.IGateWCFService", CallbackContract=typeof(HonorSerialportGateConsole.ServerWCFService.IGateWCFServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGateWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGateWCFService/RegisterGate", ReplyAction="http://tempuri.org/IGateWCFService/RegisterGateResponse")]
        byte RegisterGate(byte preferedGateId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/RegisterGate", ReplyAction="http://tempuri.org/IGateWCFService/RegisterGateResponse")]
        System.IAsyncResult BeginRegisterGate(byte preferedGateId, System.AsyncCallback callback, object asyncState);
        
        byte EndRegisterGate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/TXCompleted")]
        void TXCompleted(byte[] armlet_id_and_result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/TXCompleted")]
        System.IAsyncResult BeginTXCompleted(byte[] armlet_id_and_result, System.AsyncCallback callback, object asyncState);
        
        void EndTXCompleted(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/ArmlteStatusUpdate")]
        void ArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/ArmlteStatusUpdate")]
        System.IAsyncResult BeginArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates, System.AsyncCallback callback, object asyncState);
        
        void EndArmlteStatusUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/ArmletSendsData")]
        void ArmletSendsData(byte armlet_id, byte[] payload);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/ArmletSendsData")]
        System.IAsyncResult BeginArmletSendsData(byte armlet_id, byte[] payload, System.AsyncCallback callback, object asyncState);
        
        void EndArmletSendsData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillConnectionStatus")]
        void PillConnectionStatus(byte[] isConnectionResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/PillConnectionStatus")]
        System.IAsyncResult BeginPillConnectionStatus(byte[] isConnectionResultData, System.AsyncCallback callback, object asyncState);
        
        void EndPillConnectionStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillWriteCompleted")]
        void PillWriteCompleted(byte[] writingResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/PillWriteCompleted")]
        System.IAsyncResult BeginPillWriteCompleted(byte[] writingResultData, System.AsyncCallback callback, object asyncState);
        
        void EndPillWriteCompleted(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillDataRead")]
        void PillDataRead(byte[] readingResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/PillDataRead")]
        System.IAsyncResult BeginPillDataRead(byte[] readingResultData, System.AsyncCallback callback, object asyncState);
        
        void EndPillDataRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PinSet")]
        void PinSet(byte[] pinSetResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/PinSet")]
        System.IAsyncResult BeginPinSet(byte[] pinSetResultData, System.AsyncCallback callback, object asyncState);
        
        void EndPinSet(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGateWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendToArmlet")]
        void SendToArmlet(byte armlet_id, byte[] payload);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/SendToArmlet")]
        System.IAsyncResult BeginSendToArmlet(byte armlet_id, byte[] payload, System.AsyncCallback callback, object asyncState);
        
        void EndSendToArmlet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/CheckIfPillConnected")]
        void CheckIfPillConnected(byte[] pillConnectedData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/CheckIfPillConnected")]
        System.IAsyncResult BeginCheckIfPillConnected(byte[] pillConnectedData, System.AsyncCallback callback, object asyncState);
        
        void EndCheckIfPillConnected(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPillWrite")]
        void SendPillWrite(byte[] pillWriteData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/SendPillWrite")]
        System.IAsyncResult BeginSendPillWrite(byte[] pillWriteData, System.AsyncCallback callback, object asyncState);
        
        void EndSendPillWrite(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPillRead")]
        void SendPillRead(byte[] pillReadData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/SendPillRead")]
        System.IAsyncResult BeginSendPillRead(byte[] pillReadData, System.AsyncCallback callback, object asyncState);
        
        void EndSendPillRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPinSignal")]
        void SendPinSignal(byte[] sendPinSignalData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IGateWCFService/SendPinSignal")]
        System.IAsyncResult BeginSendPinSignal(byte[] sendPinSignalData, System.AsyncCallback callback, object asyncState);
        
        void EndSendPinSignal(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGateWCFServiceChannel : HonorSerialportGateConsole.ServerWCFService.IGateWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterGateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterGateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GateWCFServiceClient : System.ServiceModel.DuplexClientBase<HonorSerialportGateConsole.ServerWCFService.IGateWCFService>, HonorSerialportGateConsole.ServerWCFService.IGateWCFService {
        
        private BeginOperationDelegate onBeginRegisterGateDelegate;
        
        private EndOperationDelegate onEndRegisterGateDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterGateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTXCompletedDelegate;
        
        private EndOperationDelegate onEndTXCompletedDelegate;
        
        private System.Threading.SendOrPostCallback onTXCompletedCompletedDelegate;
        
        private BeginOperationDelegate onBeginArmlteStatusUpdateDelegate;
        
        private EndOperationDelegate onEndArmlteStatusUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onArmlteStatusUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginArmletSendsDataDelegate;
        
        private EndOperationDelegate onEndArmletSendsDataDelegate;
        
        private System.Threading.SendOrPostCallback onArmletSendsDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginPillConnectionStatusDelegate;
        
        private EndOperationDelegate onEndPillConnectionStatusDelegate;
        
        private System.Threading.SendOrPostCallback onPillConnectionStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginPillWriteCompletedDelegate;
        
        private EndOperationDelegate onEndPillWriteCompletedDelegate;
        
        private System.Threading.SendOrPostCallback onPillWriteCompletedCompletedDelegate;
        
        private BeginOperationDelegate onBeginPillDataReadDelegate;
        
        private EndOperationDelegate onEndPillDataReadDelegate;
        
        private System.Threading.SendOrPostCallback onPillDataReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginPinSetDelegate;
        
        private EndOperationDelegate onEndPinSetDelegate;
        
        private System.Threading.SendOrPostCallback onPinSetCompletedDelegate;
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<RegisterGateCompletedEventArgs> RegisterGateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TXCompletedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ArmlteStatusUpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ArmletSendsDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PillConnectionStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PillWriteCompletedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PillDataReadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PinSetCompleted;
        
        public byte RegisterGate(byte preferedGateId) {
            return base.Channel.RegisterGate(preferedGateId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRegisterGate(byte preferedGateId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisterGate(preferedGateId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte EndRegisterGate(System.IAsyncResult result) {
            return base.Channel.EndRegisterGate(result);
        }
        
        private System.IAsyncResult OnBeginRegisterGate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte preferedGateId = ((byte)(inValues[0]));
            return this.BeginRegisterGate(preferedGateId, callback, asyncState);
        }
        
        private object[] OnEndRegisterGate(System.IAsyncResult result) {
            byte retVal = this.EndRegisterGate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterGateCompleted(object state) {
            if ((this.RegisterGateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterGateCompleted(this, new RegisterGateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterGateAsync(byte preferedGateId) {
            this.RegisterGateAsync(preferedGateId, null);
        }
        
        public void RegisterGateAsync(byte preferedGateId, object userState) {
            if ((this.onBeginRegisterGateDelegate == null)) {
                this.onBeginRegisterGateDelegate = new BeginOperationDelegate(this.OnBeginRegisterGate);
            }
            if ((this.onEndRegisterGateDelegate == null)) {
                this.onEndRegisterGateDelegate = new EndOperationDelegate(this.OnEndRegisterGate);
            }
            if ((this.onRegisterGateCompletedDelegate == null)) {
                this.onRegisterGateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterGateCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterGateDelegate, new object[] {
                        preferedGateId}, this.onEndRegisterGateDelegate, this.onRegisterGateCompletedDelegate, userState);
        }
        
        public void TXCompleted(byte[] armlet_id_and_result) {
            base.Channel.TXCompleted(armlet_id_and_result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTXCompleted(byte[] armlet_id_and_result, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTXCompleted(armlet_id_and_result, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTXCompleted(System.IAsyncResult result) {
            base.Channel.EndTXCompleted(result);
        }
        
        private System.IAsyncResult OnBeginTXCompleted(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] armlet_id_and_result = ((byte[])(inValues[0]));
            return this.BeginTXCompleted(armlet_id_and_result, callback, asyncState);
        }
        
        private object[] OnEndTXCompleted(System.IAsyncResult result) {
            this.EndTXCompleted(result);
            return null;
        }
        
        private void OnTXCompletedCompleted(object state) {
            if ((this.TXCompletedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TXCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TXCompletedAsync(byte[] armlet_id_and_result) {
            this.TXCompletedAsync(armlet_id_and_result, null);
        }
        
        public void TXCompletedAsync(byte[] armlet_id_and_result, object userState) {
            if ((this.onBeginTXCompletedDelegate == null)) {
                this.onBeginTXCompletedDelegate = new BeginOperationDelegate(this.OnBeginTXCompleted);
            }
            if ((this.onEndTXCompletedDelegate == null)) {
                this.onEndTXCompletedDelegate = new EndOperationDelegate(this.OnEndTXCompleted);
            }
            if ((this.onTXCompletedCompletedDelegate == null)) {
                this.onTXCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTXCompletedCompleted);
            }
            base.InvokeAsync(this.onBeginTXCompletedDelegate, new object[] {
                        armlet_id_and_result}, this.onEndTXCompletedDelegate, this.onTXCompletedCompletedDelegate, userState);
        }
        
        public void ArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates) {
            base.Channel.ArmlteStatusUpdate(updates);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArmlteStatusUpdate(updates, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndArmlteStatusUpdate(System.IAsyncResult result) {
            base.Channel.EndArmlteStatusUpdate(result);
        }
        
        private System.IAsyncResult OnBeginArmlteStatusUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates = ((HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[])(inValues[0]));
            return this.BeginArmlteStatusUpdate(updates, callback, asyncState);
        }
        
        private object[] OnEndArmlteStatusUpdate(System.IAsyncResult result) {
            this.EndArmlteStatusUpdate(result);
            return null;
        }
        
        private void OnArmlteStatusUpdateCompleted(object state) {
            if ((this.ArmlteStatusUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArmlteStatusUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArmlteStatusUpdateAsync(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates) {
            this.ArmlteStatusUpdateAsync(updates, null);
        }
        
        public void ArmlteStatusUpdateAsync(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates, object userState) {
            if ((this.onBeginArmlteStatusUpdateDelegate == null)) {
                this.onBeginArmlteStatusUpdateDelegate = new BeginOperationDelegate(this.OnBeginArmlteStatusUpdate);
            }
            if ((this.onEndArmlteStatusUpdateDelegate == null)) {
                this.onEndArmlteStatusUpdateDelegate = new EndOperationDelegate(this.OnEndArmlteStatusUpdate);
            }
            if ((this.onArmlteStatusUpdateCompletedDelegate == null)) {
                this.onArmlteStatusUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArmlteStatusUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginArmlteStatusUpdateDelegate, new object[] {
                        updates}, this.onEndArmlteStatusUpdateDelegate, this.onArmlteStatusUpdateCompletedDelegate, userState);
        }
        
        public void ArmletSendsData(byte armlet_id, byte[] payload) {
            base.Channel.ArmletSendsData(armlet_id, payload);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginArmletSendsData(byte armlet_id, byte[] payload, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArmletSendsData(armlet_id, payload, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndArmletSendsData(System.IAsyncResult result) {
            base.Channel.EndArmletSendsData(result);
        }
        
        private System.IAsyncResult OnBeginArmletSendsData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte armlet_id = ((byte)(inValues[0]));
            byte[] payload = ((byte[])(inValues[1]));
            return this.BeginArmletSendsData(armlet_id, payload, callback, asyncState);
        }
        
        private object[] OnEndArmletSendsData(System.IAsyncResult result) {
            this.EndArmletSendsData(result);
            return null;
        }
        
        private void OnArmletSendsDataCompleted(object state) {
            if ((this.ArmletSendsDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArmletSendsDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArmletSendsDataAsync(byte armlet_id, byte[] payload) {
            this.ArmletSendsDataAsync(armlet_id, payload, null);
        }
        
        public void ArmletSendsDataAsync(byte armlet_id, byte[] payload, object userState) {
            if ((this.onBeginArmletSendsDataDelegate == null)) {
                this.onBeginArmletSendsDataDelegate = new BeginOperationDelegate(this.OnBeginArmletSendsData);
            }
            if ((this.onEndArmletSendsDataDelegate == null)) {
                this.onEndArmletSendsDataDelegate = new EndOperationDelegate(this.OnEndArmletSendsData);
            }
            if ((this.onArmletSendsDataCompletedDelegate == null)) {
                this.onArmletSendsDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArmletSendsDataCompleted);
            }
            base.InvokeAsync(this.onBeginArmletSendsDataDelegate, new object[] {
                        armlet_id,
                        payload}, this.onEndArmletSendsDataDelegate, this.onArmletSendsDataCompletedDelegate, userState);
        }
        
        public void PillConnectionStatus(byte[] isConnectionResultData) {
            base.Channel.PillConnectionStatus(isConnectionResultData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPillConnectionStatus(byte[] isConnectionResultData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPillConnectionStatus(isConnectionResultData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPillConnectionStatus(System.IAsyncResult result) {
            base.Channel.EndPillConnectionStatus(result);
        }
        
        private System.IAsyncResult OnBeginPillConnectionStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] isConnectionResultData = ((byte[])(inValues[0]));
            return this.BeginPillConnectionStatus(isConnectionResultData, callback, asyncState);
        }
        
        private object[] OnEndPillConnectionStatus(System.IAsyncResult result) {
            this.EndPillConnectionStatus(result);
            return null;
        }
        
        private void OnPillConnectionStatusCompleted(object state) {
            if ((this.PillConnectionStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PillConnectionStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PillConnectionStatusAsync(byte[] isConnectionResultData) {
            this.PillConnectionStatusAsync(isConnectionResultData, null);
        }
        
        public void PillConnectionStatusAsync(byte[] isConnectionResultData, object userState) {
            if ((this.onBeginPillConnectionStatusDelegate == null)) {
                this.onBeginPillConnectionStatusDelegate = new BeginOperationDelegate(this.OnBeginPillConnectionStatus);
            }
            if ((this.onEndPillConnectionStatusDelegate == null)) {
                this.onEndPillConnectionStatusDelegate = new EndOperationDelegate(this.OnEndPillConnectionStatus);
            }
            if ((this.onPillConnectionStatusCompletedDelegate == null)) {
                this.onPillConnectionStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPillConnectionStatusCompleted);
            }
            base.InvokeAsync(this.onBeginPillConnectionStatusDelegate, new object[] {
                        isConnectionResultData}, this.onEndPillConnectionStatusDelegate, this.onPillConnectionStatusCompletedDelegate, userState);
        }
        
        public void PillWriteCompleted(byte[] writingResultData) {
            base.Channel.PillWriteCompleted(writingResultData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPillWriteCompleted(byte[] writingResultData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPillWriteCompleted(writingResultData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPillWriteCompleted(System.IAsyncResult result) {
            base.Channel.EndPillWriteCompleted(result);
        }
        
        private System.IAsyncResult OnBeginPillWriteCompleted(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] writingResultData = ((byte[])(inValues[0]));
            return this.BeginPillWriteCompleted(writingResultData, callback, asyncState);
        }
        
        private object[] OnEndPillWriteCompleted(System.IAsyncResult result) {
            this.EndPillWriteCompleted(result);
            return null;
        }
        
        private void OnPillWriteCompletedCompleted(object state) {
            if ((this.PillWriteCompletedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PillWriteCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PillWriteCompletedAsync(byte[] writingResultData) {
            this.PillWriteCompletedAsync(writingResultData, null);
        }
        
        public void PillWriteCompletedAsync(byte[] writingResultData, object userState) {
            if ((this.onBeginPillWriteCompletedDelegate == null)) {
                this.onBeginPillWriteCompletedDelegate = new BeginOperationDelegate(this.OnBeginPillWriteCompleted);
            }
            if ((this.onEndPillWriteCompletedDelegate == null)) {
                this.onEndPillWriteCompletedDelegate = new EndOperationDelegate(this.OnEndPillWriteCompleted);
            }
            if ((this.onPillWriteCompletedCompletedDelegate == null)) {
                this.onPillWriteCompletedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPillWriteCompletedCompleted);
            }
            base.InvokeAsync(this.onBeginPillWriteCompletedDelegate, new object[] {
                        writingResultData}, this.onEndPillWriteCompletedDelegate, this.onPillWriteCompletedCompletedDelegate, userState);
        }
        
        public void PillDataRead(byte[] readingResultData) {
            base.Channel.PillDataRead(readingResultData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPillDataRead(byte[] readingResultData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPillDataRead(readingResultData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPillDataRead(System.IAsyncResult result) {
            base.Channel.EndPillDataRead(result);
        }
        
        private System.IAsyncResult OnBeginPillDataRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] readingResultData = ((byte[])(inValues[0]));
            return this.BeginPillDataRead(readingResultData, callback, asyncState);
        }
        
        private object[] OnEndPillDataRead(System.IAsyncResult result) {
            this.EndPillDataRead(result);
            return null;
        }
        
        private void OnPillDataReadCompleted(object state) {
            if ((this.PillDataReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PillDataReadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PillDataReadAsync(byte[] readingResultData) {
            this.PillDataReadAsync(readingResultData, null);
        }
        
        public void PillDataReadAsync(byte[] readingResultData, object userState) {
            if ((this.onBeginPillDataReadDelegate == null)) {
                this.onBeginPillDataReadDelegate = new BeginOperationDelegate(this.OnBeginPillDataRead);
            }
            if ((this.onEndPillDataReadDelegate == null)) {
                this.onEndPillDataReadDelegate = new EndOperationDelegate(this.OnEndPillDataRead);
            }
            if ((this.onPillDataReadCompletedDelegate == null)) {
                this.onPillDataReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPillDataReadCompleted);
            }
            base.InvokeAsync(this.onBeginPillDataReadDelegate, new object[] {
                        readingResultData}, this.onEndPillDataReadDelegate, this.onPillDataReadCompletedDelegate, userState);
        }
        
        public void PinSet(byte[] pinSetResultData) {
            base.Channel.PinSet(pinSetResultData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPinSet(byte[] pinSetResultData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPinSet(pinSetResultData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPinSet(System.IAsyncResult result) {
            base.Channel.EndPinSet(result);
        }
        
        private System.IAsyncResult OnBeginPinSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] pinSetResultData = ((byte[])(inValues[0]));
            return this.BeginPinSet(pinSetResultData, callback, asyncState);
        }
        
        private object[] OnEndPinSet(System.IAsyncResult result) {
            this.EndPinSet(result);
            return null;
        }
        
        private void OnPinSetCompleted(object state) {
            if ((this.PinSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PinSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PinSetAsync(byte[] pinSetResultData) {
            this.PinSetAsync(pinSetResultData, null);
        }
        
        public void PinSetAsync(byte[] pinSetResultData, object userState) {
            if ((this.onBeginPinSetDelegate == null)) {
                this.onBeginPinSetDelegate = new BeginOperationDelegate(this.OnBeginPinSet);
            }
            if ((this.onEndPinSetDelegate == null)) {
                this.onEndPinSetDelegate = new EndOperationDelegate(this.OnEndPinSet);
            }
            if ((this.onPinSetCompletedDelegate == null)) {
                this.onPinSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPinSetCompleted);
            }
            base.InvokeAsync(this.onBeginPinSetDelegate, new object[] {
                        pinSetResultData}, this.onEndPinSetDelegate, this.onPinSetCompletedDelegate, userState);
        }
    }
}
