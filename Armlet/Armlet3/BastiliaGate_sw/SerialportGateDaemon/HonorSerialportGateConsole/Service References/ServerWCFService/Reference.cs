//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HonorSerialportGateConsole.ServerWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerUpdate", Namespace="http://schemas.datacontract.org/2004/07/NetworkLevel.WCFServices")]
    [System.SerializableAttribute()]
    public partial class PlayerUpdate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ArmletIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NewBloodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NewRoomField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ArmletID {
            get {
                return this.ArmletIDField;
            }
            set {
                if ((this.ArmletIDField.Equals(value) != true)) {
                    this.ArmletIDField = value;
                    this.RaisePropertyChanged("ArmletID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NewBlood {
            get {
                return this.NewBloodField;
            }
            set {
                if ((this.NewBloodField.Equals(value) != true)) {
                    this.NewBloodField = value;
                    this.RaisePropertyChanged("NewBlood");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NewRoom {
            get {
                return this.NewRoomField;
            }
            set {
                if ((this.NewRoomField.Equals(value) != true)) {
                    this.NewRoomField = value;
                    this.RaisePropertyChanged("NewRoom");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerWCFService.IGateWCFService", CallbackContract=typeof(HonorSerialportGateConsole.ServerWCFService.IGateWCFServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGateWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGateWCFService/RegisterGate", ReplyAction="http://tempuri.org/IGateWCFService/RegisterGateResponse")]
        byte RegisterGate(byte preferedGateId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/TXCompleted")]
        void TXCompleted(byte armlet_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/ArmlteStatusUpdate")]
        void ArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/ArmletSendsData")]
        void ArmletSendsData(byte armlet_id, byte[] payload);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillConnectionStatus")]
        void PillConnectionStatus(byte[] isConnectionResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillWriteCompleted")]
        void PillWriteCompleted(byte[] writingResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PillDataRead")]
        void PillDataRead(byte[] readingResultData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/PinSet")]
        void PinSet(byte[] pinSetResultData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGateWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendToArmlet")]
        void SendToArmlet(byte armlet_id, byte[] payload);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/CheckIfPillConnected")]
        void CheckIfPillConnected(byte[] pillConnectedData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPillWrite")]
        void SendPillWrite(byte[] pillWriteData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPillRead")]
        void SendPillRead(byte[] pillReadData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGateWCFService/SendPinSignal")]
        void SendPinSignal(byte[] sendPinSignalData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGateWCFServiceChannel : HonorSerialportGateConsole.ServerWCFService.IGateWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GateWCFServiceClient : System.ServiceModel.DuplexClientBase<HonorSerialportGateConsole.ServerWCFService.IGateWCFService>, HonorSerialportGateConsole.ServerWCFService.IGateWCFService {
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GateWCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public byte RegisterGate(byte preferedGateId) {
            return base.Channel.RegisterGate(preferedGateId);
        }
        
        public void TXCompleted(byte armlet_id) {
            base.Channel.TXCompleted(armlet_id);
        }
        
        public void ArmlteStatusUpdate(HonorSerialportGateConsole.ServerWCFService.PlayerUpdate[] updates) {
            base.Channel.ArmlteStatusUpdate(updates);
        }
        
        public void ArmletSendsData(byte armlet_id, byte[] payload) {
            base.Channel.ArmletSendsData(armlet_id, payload);
        }
        
        public void PillConnectionStatus(byte[] isConnectionResultData) {
            base.Channel.PillConnectionStatus(isConnectionResultData);
        }
        
        public void PillWriteCompleted(byte[] writingResultData) {
            base.Channel.PillWriteCompleted(writingResultData);
        }
        
        public void PillDataRead(byte[] readingResultData) {
            base.Channel.PillDataRead(readingResultData);
        }
        
        public void PinSet(byte[] pinSetResultData) {
            base.Channel.PinSet(pinSetResultData);
        }
    }
}
